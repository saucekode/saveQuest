{"version":3,"sources":["components/Form.js","App.js","index.js"],"names":["OnboardingForm","useState","firstName","lastName","email","tierType","amount","interest","formData","setFormData","errors","setErrors","userRecords","setUserRecords","handleChange","e","target","name","value","updatedFormData","prevErrors","useEffect","localStorage","setItem","JSON","stringify","onSubmit","preventDefault","formIsValid","newErrors","trim","test","prevFormArray","className","type","onChange","App","showForm","setShowForm","onClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5af76c99.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst OnboardingForm = () => {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    tierType: '',\n    amount:'',\n    interest: '',\n  });\n  const [errors, setErrors] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    tierType: ''\n  });\n\n  const [userRecords, setUserRecords] = useState([])\n\n  \n\n//   console.log(userRecord)\nconst handleChange = (e) => {\n    const { name, value } = e.target;\n    let updatedFormData = { ...formData };\n  \n    if (value === \"tier_1\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"10000\",\n        interest: (5/100) * 10000\n      };\n    } else if (value === \"tier_2\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"20000\",\n        interest: (10/100) * 20000\n      };\n    } else if (value === \"tier_3\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"30000\",\n        interest: (20/100) * 30000\n      };\n    }\n  \n    updatedFormData[name] = value;\n  \n    setFormData(updatedFormData);\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: \"\",\n    }));\n  };\n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Simple validation\n    let formIsValid = true;\n    const newErrors = { ...errors };\n\n    if (formData.firstName.trim() === '') {\n      formIsValid = false;\n      newErrors.firstName = 'First name is required';\n    }\n\n    if (formData.lastName.trim() === '') {\n      formIsValid = false;\n      newErrors.lastName = 'Last name is required';\n    }\n\n    if (formData.email.trim() === '') {\n      formIsValid = false;\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      formIsValid = false;\n      newErrors.email = 'Invalid email format';\n    }\n\n    if (formData.tierType.trim() === '') {\n      formIsValid = false;\n      newErrors.tierType = 'Tier type is required';\n    }\n\n    setErrors(newErrors);\n\n\n    if (formIsValid) {\n      localStorage.setItem('formData', JSON.stringify(formData));\n\n      setUserRecords((prevFormArray) => [...prevFormArray, formData]);\n\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        tierType: '',\n      });\n\n    }\n  };\n\n \n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(userRecords))\n  })\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n      {errors.firstName && <div className=\"error\">{errors.firstName}</div>}\n        <label>\n          First Name<br/>\n          <input\n            type=\"text\"\n            name=\"firstName\"\n            value={formData.firstName}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <div>\n      {errors.lastName && <div className=\"error\">{errors.lastName}</div>}\n        <label>\n          Last Name<br/>\n          <input\n            type=\"text\"\n            name=\"lastName\"\n            value={formData.lastName}\n            onChange={handleChange}\n          />\n        </label>\n        \n      </div>\n      <div>\n        {errors.email && <div className=\"error\">{errors.email}</div>}\n        <label>\n          Email<br/>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <div>\n      {errors.tierType && <div className=\"error\">{errors.tierType}</div>}\n\n        <label>\n          Select tier<br/>\n          <select\n            name=\"tierType\"\n            value={formData.tierType}\n            onChange={handleChange}\n          >\n            <option value=\"\">Select a savings tier</option>\n            <option value=\"tier_1\">Tier 1</option>\n            <option value=\"tier_2\">Tier 2</option>\n            <option value=\"tier_3\">Tier 3</option>\n          </select>\n        </label>\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\nexport default OnboardingForm;\n","import OnboardingForm from 'components/Form';\nimport './App.css';\nimport { useState } from 'react';\n\nconst App = () => {\n\n  const [showForm, setShowForm] = useState()\n\n  const handleRegister = () => {\n    setShowForm(true)\n  }\n\n  return (\n    <div className=\"App\">\n      {\n\n        !showForm\n        &&\n        <div className=\"p-top center\">\n        <p className=\"heading\">Welcome to SaveQuest</p>\n        <p className='sub-heading'>SaveQuest is a savings application that earns you profit in a week period.</p>\n        <buton className=\"save-btn\" onClick={handleRegister}>Start Saving Now</buton>\n      </div>\n      }\n\n      {showForm\n        &&\n\n        <>\n        <div className='center form-heading'>Savings form</div>\n        <div  className='form'>\n        <OnboardingForm/>\n        </div>\n        </>\n        \n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}