{"version":3,"sources":["components/Form.js","App.js","index.js"],"names":["OnboardingForm","useState","firstName","lastName","email","tierType","amount","interest","formData","setFormData","errors","setErrors","userRecords","setUserRecords","showSavingsData","setShowSavingsData","handleChange","e","target","name","value","updatedFormData","prevErrors","userData","setUserData","useEffect","storedUser","localStorage","getItem","JSON","parse","setItem","stringify","onSubmit","preventDefault","formIsValid","newErrors","trim","test","prevFormArray","className","type","onChange","App","showForm","setShowForm","userRecord","onClick","users","map","u","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df7a74a6.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst OnboardingForm = () => {\n  const [formData, setFormData] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    tierType: '',\n    amount:'',\n    interest: '',\n  });\n  const [errors, setErrors] = useState({\n    firstName: '',\n    lastName: '',\n    email: '',\n    tierType: ''\n  });\n\n  const [userRecords, setUserRecords] = useState([])\n\n  const [showSavingsData, setShowSavingsData] = useState()\n\n  \n\n//   console.log(userRecord)\nconst handleChange = (e) => {\n    const { name, value } = e.target;\n    let updatedFormData = { ...formData };\n  \n    if (value === \"tier_1\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"10000\",\n        interest: (5/100) * 10000 * 7\n      };\n    } else if (value === \"tier_2\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"20000\",\n        interest: (10/100) * 20000 * 7\n      };\n    } else if (value === \"tier_3\") {\n      updatedFormData = {\n        ...updatedFormData,\n        amount: \"30000\",\n        interest: (20/100) * 30000 * 7\n      };\n    }\n  \n    updatedFormData[name] = value;\n  \n    setFormData(updatedFormData);\n    setErrors((prevErrors) => ({\n      ...prevErrors,\n      [name]: \"\",\n    }));\n  };\n  \n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Simple validation\n    let formIsValid = true;\n    const newErrors = { ...errors };\n\n    if (formData.firstName.trim() === '') {\n      formIsValid = false;\n      newErrors.firstName = 'First name is required';\n    }\n\n    if (formData.lastName.trim() === '') {\n      formIsValid = false;\n      newErrors.lastName = 'Last name is required';\n    }\n\n    if (formData.email.trim() === '') {\n      formIsValid = false;\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      formIsValid = false;\n      newErrors.email = 'Invalid email format';\n    }\n\n    if (formData.tierType.trim() === '') {\n      formIsValid = false;\n      newErrors.tierType = 'Tier type is required';\n    }\n\n    setErrors(newErrors);\n\n\n    if (formIsValid) {\n      localStorage.setItem('user', JSON.stringify(formData));\n\n      setUserRecords((prevFormArray) => [...prevFormArray, formData]);\n\n      setFormData({\n        firstName: '',\n        lastName: '',\n        email: '',\n        tierType: '',\n      });\n\n    }\n\n    setShowSavingsData(true)\n  };\n\n  const [userData, setUserData] = useState()\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUserData(JSON.parse(storedUser));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(userRecords))\n  })\n  \n  return (\n    <>\n        {\n\n            !showSavingsData\n            ?\n            <form onSubmit={handleSubmit}>\n      <div>\n      {errors.firstName && <div className=\"error\">{errors.firstName}</div>}\n        <label>\n          First Name<br/>\n          <input\n            type=\"text\"\n            name=\"firstName\"\n            value={formData.firstName}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <div>\n      {errors.lastName && <div className=\"error\">{errors.lastName}</div>}\n        <label>\n          Last Name<br/>\n          <input\n            type=\"text\"\n            name=\"lastName\"\n            value={formData.lastName}\n            onChange={handleChange}\n          />\n        </label>\n        \n      </div>\n      <div>\n        {errors.email && <div className=\"error\">{errors.email}</div>}\n        <label>\n          Email<br/>\n          <input\n            type=\"email\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <div>\n      {errors.tierType && <div className=\"error\">{errors.tierType}</div>}\n\n        <label>\n          Select tier<br/>\n          <select\n            name=\"tierType\"\n            value={formData.tierType}\n            onChange={handleChange}\n          >\n            <option value=\"\">Select a savings tier</option>\n            <option value=\"tier_1\">Tier 1</option>\n            <option value=\"tier_2\">Tier 2</option>\n            <option value=\"tier_3\">Tier 3</option>\n          </select>\n        </label>\n      </div>\n      <button type=\"submit\">Submit</button>\n    </form>\n    :\n    <div>\n        <p>Here are your details:</p>\n        <p>First Name: {userData.firstName}</p>\n        <p>Last Name: {userData.lastName}</p>\n        <p>Interest: {userData.interest}</p>\n        <p>Principal: {userData.amount}</p>\n    </div>\n        }\n    </>\n  );\n};\n\nexport default OnboardingForm;\n","import OnboardingForm from 'components/Form';\nimport './App.css';\nimport { useState } from 'react';\n\nconst App = () => {\n\n  const [showForm, setShowForm] = useState()\n  const [userRecord, setUserRecords] = useState([])\n\n  const handleRegister = () => {\n    setShowForm(true)\n  }\n\n  const handleCustomerRecords = () => {\n\n    setShowForm(false)\n    const users = localStorage.getItem(\"users\");\n    if(users){\n      setUserRecords(JSON.parse(users))\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {\n\n        !showForm\n        &&\n        <div className=\"p-top center\">\n        <p className=\"heading\">Welcome to SaveQuest</p>\n        <p className='sub-heading'>SaveQuest is a savings application that earns you profit in a week period.</p>\n        <buton className=\"save-btn\" onClick={handleRegister}>Start Saving Now</buton>\n        <button className=\"view-btn\" onClick={handleCustomerRecords}>View Savings Records</button>\n      </div>\n      }\n\n      {showForm\n        ?\n\n        <>\n        <div className='center form-heading'>Savings form</div>\n        <div  className='form'>\n        <OnboardingForm/>\n        </div>\n        </>\n        \n        :\n\n        <>\n        {userRecord.map((u) => {\n          <div>\n            <p>firstName: {u.firstName}</p>\n            <p>lastName: {u.lastName}</p>\n          </div>\n        })}\n        </>\n      }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}